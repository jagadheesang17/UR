const fs = require('fs');
const path = require('path');
const chokidar = require('chokidar');
const axios = require('axios');

const CODEGEN_FILE = process.env.CODEGEN_FILE || 'codegen-output.ts';

// Resolve MCP endpoint: env > utils/mcp/http.config.json > default
function resolveEndpoint() {
  if (process.env.MCP_ENDPOINT) return process.env.MCP_ENDPOINT;
  try {
    const cfgPath = path.resolve(process.cwd(), 'utils', 'mcp', 'http.config.json');
    if (fs.existsSync(cfgPath)) {
      const cfg = JSON.parse(fs.readFileSync(cfgPath, 'utf8'));
      if (cfg && cfg.endpoint) return cfg.endpoint;
    }
  } catch {
    // ignore
  }
  return 'http://localhost:3001/generateFrameworkTest';
}

const ENDPOINT = resolveEndpoint();
const TEST_NAME = process.env.TEST_NAME || 'AutoGeneratedTest';
const MODULE = process.env.MODULE || undefined;
const SCENARIO = process.env.SCENARIO || undefined;

chokidar.watch(CODEGEN_FILE, { ignoreInitial: true }).on('change', async () => {
  try {
    const steps = fs.readFileSync(CODEGEN_FILE, 'utf8');
    const payload = { rawSteps: steps, testName: TEST_NAME };
    if (MODULE) payload.module = MODULE;
    if (SCENARIO) payload.scenario = SCENARIO;
    const res = await axios.post(ENDPOINT, payload);
    if (res.data && res.data.success && res.data.filePath) {
      console.log(`âœ… New test generated: ${res.data.filePath}`);
    } else {
      console.error('MCP response did not indicate success:', res.data);
    }
  } catch (e) {
    console.error('Watcher MCP call failed:', e?.response?.data || e?.message || e);
  }
});

console.log(`ðŸ‘€ Watching ${CODEGEN_FILE} for changes...`);
console.log(`ðŸ”— MCP endpoint: ${ENDPOINT}`);
